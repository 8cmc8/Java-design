观察者模式：
定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新
（观察者和可观察者之间用松耦合的方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口）
1、观察者中持有被观察者的引用，可以在构造器中调用被观察者的register方法进行注册，观察者需要实现观察者接口（实现接口的更新方法）；
2、被观察者持有观察者的引用（一组观察者序列），提供用于观察者注册的方法register（将观察者存入观察者序列的方法），提供统一更新观察者的方法notify（该方法会执行每一个观察者的更新方法）。

设计原则：
为交互对象之间的松耦合设计而努力

使用java内置API实现观察者模式的不足：
1、java.util.Observable 是一个类，而非接口（违反设计原则的针对接口编程，而非针对实现编程）

2、Observable.setChanged()方法被声明为protected,
除非继承自Observable，否则无法创建Observable实例并组合到自己的对象中,
无法在别的类中使用setChanged方法（违反设计原则的多用组合，少用继承）